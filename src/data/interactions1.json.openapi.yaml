info:
    version: 1.0.0
    title: 'GitRows API Interface'
    contact:
        name: kcrysa
        url: 'https://github.com/kcrysa'
    x-gitrows-repository: 'https://github.com/kcrysa/WheelOfFortune/blob/master/src/data/interactions1.json'
    x-gitrows-api-path: '@github/kcrysa/WheelOfFortune/src/data/interactions1.json'
    license:
        name: 'MIT License'
        url: 'https://opensource.org/licenses/MIT'
    description: "\n\n---\n\nCreated with [GitRows](https://gitrows.com)"
components:
    schemas:
        Error:
            type: object
            properties:
                code:
                    type: integer
                    format: int32
                message:
                    type: string
                documentation:
                    type: object
                    properties:
                        description:
                            type: string
                        url:
                            type: string
        Record:
            type: object
            properties:
                id:
                    type: integer
                    format: int32
                    description: 'interaction number'
                questionId:
                    type: integer
                    format: int32
                    description: 'questions which was shown to the user'
                answerId:
                    type: integer
                    format: int32
                    description: 'answer selected by the user'
                isCorrect:
                    type: boolean
                    description: 'whether answer was correct or not'
                date:
                    type: string
                    description: 'when the interaction was recorded'
                prize:
                    type: string
                    description: 'what prize was at stake'
openapi: 3.0.0
servers:
    -
        url: 'https://api.gitrows.com'
paths:
    /@github/kcrysa/WheelOfFortune/src/data/interactions1.json:
        get:
            description: 'Return a list of records'
            operationId: listRecords
            parameters:
                -
                    in: query
                    name: id
                    schema:
                        oneOf:
                            -
                                type: integer
                            -
                                type: string
                    description: "Select records that match value for `id`.\n\nYou can optionally use the following comparison operators as prefixes to your values, e.g. `id=gt:10`:\n\n`not:` equals not; `lt:` less than; `lte:` less than or equal; `gt:` greater than; `gte:` greater than or equal"
                    allowReserved: true
                -
                    in: query
                    name: questionId
                    schema:
                        oneOf:
                            -
                                type: integer
                            -
                                type: string
                    description: "Select records that match value for `questionId`.\n\nYou can optionally use the following comparison operators as prefixes to your values, e.g. `questionId=gt:10`:\n\n`not:` equals not; `lt:` less than; `lte:` less than or equal; `gt:` greater than; `gte:` greater than or equal"
                    allowReserved: true
                -
                    in: query
                    name: answerId
                    schema:
                        oneOf:
                            -
                                type: integer
                            -
                                type: string
                    description: "Select records that match value for `answerId`.\n\nYou can optionally use the following comparison operators as prefixes to your values, e.g. `answerId=gt:10`:\n\n`not:` equals not; `lt:` less than; `lte:` less than or equal; `gt:` greater than; `gte:` greater than or equal"
                    allowReserved: true
                -
                    in: query
                    name: isCorrect
                    schema:
                        oneOf:
                            -
                                type: boolean
                            -
                                type: string
                    description: "Select records that match value for `isCorrect`.\n\nYou can optionally use the following comparison operators as prefixes to your values, e.g. `isCorrect=gt:10`:\n\n`not:` equals not; `lt:` less than; `lte:` less than or equal; `gt:` greater than; `gte:` greater than or equal"
                    allowReserved: true
                -
                    in: query
                    name: date
                    schema:
                        type: string
                    description: "Select records that match value for `date`.\n\nYou can optionally use the following comparison operators as prefixes to your values, e.g. `date=*:foo`:\n\n`starts:` text starts with, alias: `^:`; `contains:` contains text, alias: `*:`; `ends:` text ends with, alias: `$:`"
                    allowReserved: true
                -
                    in: query
                    name: prize
                    schema:
                        type: string
                    description: "Select records that match value for `prize`.\n\nYou can optionally use the following comparison operators as prefixes to your values, e.g. `prize=*:foo`:\n\n`starts:` text starts with, alias: `^:`; `contains:` contains text, alias: `*:`; `ends:` text ends with, alias: `$:`"
                    allowReserved: true
                -
                    in: query
                    name: $count
                    schema:
                        type: string
                    description: 'Counts the records in the data set, use `*` or any `columnName` as parameter'
                    allowReserved: true
                -
                    in: query
                    name: $avg
                    schema:
                        type: string
                    description: 'Calculates the average of all numeric values in `columnName`'
                    allowReserved: true
                -
                    in: query
                    name: $sum
                    schema:
                        type: string
                    description: 'Calculates the sum of all numeric values in `columnName`'
                    allowReserved: true
                -
                    in: query
                    name: $min
                    schema:
                        type: string
                    description: 'Returns the smallest of all numeric values in `columnName`'
                    allowReserved: true
                -
                    in: query
                    name: $max
                    schema:
                        type: string
                    description: 'Returns the largest of all numeric values in `columnName`'
                    allowReserved: true
            responses:
                '200':
                    description: 'A list of records with any optionally provided filters applied.'
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Record'
                default:
                    description: 'Error Payload'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
    '/@github/kcrysa/WheelOfFortune/src/data/interactions1.json/{id}':
        get:
            description: 'Return a specific record'
            operationId: getRecordById
            parameters:
                -
                    name: id
                    description: 'Distinct id to select data set by'
                    in: path
                    required: true
                    schema:
                        type: string
            responses:
                '200':
                    description: 'Returns a distinct record'
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Record'
                default:
                    description: 'Error Payload'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
